<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Jefo</title><link>https://qizhengzou.github.io/</link><description>Jefo</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>2838264218@qq.com (Jefo)</managingEditor><webMaster>2838264218@qq.com (Jefo)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Jan 2022 19:49:08 +0800</lastBuildDate><atom:link href="https://qizhengzou.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>MUSK</title><link>https://qizhengzou.github.io/musk/</link><pubDate>Wed, 19 Jan 2022 19:49:08 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/musk/</guid><description>摘自1.6万字马斯克访谈实录 21年末，Youtube知名科技UP主，拥有143万粉丝的大V Lex Fridman与马斯克进行了一场长达2小时31分</description></item><item><title>Go_base_07</title><link>https://qizhengzou.github.io/go_base_07/</link><pubDate>Thu, 06 Jan 2022 09:16:49 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_07/</guid><description>并发编程 并发介绍 进程和线程 进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。 线程是进程的一个执行实体,是CPU调度</description></item><item><title>Go_base_06</title><link>https://qizhengzou.github.io/go_base_06/</link><pubDate>Thu, 06 Jan 2022 09:16:45 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_06/</guid><description>网络编程 互联网协议介绍 互联网的核心是一系列协议，总称为”互联网协议”（Internet Protocol Suite），正是这一些协议规定了电脑如何连接和组网</description></item><item><title>Go_base_05</title><link>https://qizhengzou.github.io/go_base_05/</link><pubDate>Thu, 06 Jan 2022 09:16:40 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_05/</guid><description>面向对象 匿名字段 go支持只提供类型而不写字段名的方式，也就是匿名字段，也称为嵌入字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>Go_base_04</title><link>https://qizhengzou.github.io/go_base_04/</link><pubDate>Thu, 06 Jan 2022 09:16:37 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_04/</guid><description>方法 方法定义 Golang 方法总是绑定对象实例，并隐式将实例作为第一实参 (receiver)。 只能为当前包内命名类型定义方法。 参数 receiver 可任意命名。如方法中</description></item><item><title>Go_base_03</title><link>https://qizhengzou.github.io/go_base_03/</link><pubDate>Thu, 06 Jan 2022 09:16:34 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_03/</guid><description>函数 函数定义 go的函数特点： 无需声明原型。 支持不定参、变参。 支持多返回值。 支持命名返回参数。 支持匿名函数和闭包。（闭包详见后文） 函数也是一种</description></item><item><title>Go_base_02</title><link>https://qizhengzou.github.io/go_base_02/</link><pubDate>Thu, 06 Jan 2022 09:16:07 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/go_base_02/</guid><description>流程控制 if Go 编程语言中 if 语句的语法如下： 1 2 3 4 5 6 7 8 可省略条件表达式括号。 持初始化语句，可定义代码块局部变量。 代码块左花括号必须在条件表</description></item><item><title>Algorithm_dynamicProgramming</title><link>https://qizhengzou.github.io/algorithm_dynamicprogramming/</link><pubDate>Thu, 06 Jan 2022 08:27:39 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/algorithm_dynamicprogramming/</guid><description>动态规划 有很多重叠子问题，优先考虑使用动态规划。 与贪心的区别：贪心不会考虑之前的状态，只考虑局部最优。 理论基础 dp步骤： 确定dp数组（dp t</description></item><item><title>Algorithm_greedy</title><link>https://qizhengzou.github.io/algorithm_greedy/</link><pubDate>Thu, 06 Jan 2022 08:23:51 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/algorithm_greedy/</guid><description>贪心算法 理论基础 贪心算法一般分为如下四步： 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的最优解 将局部最优解堆叠成全局最优解 分发</description></item><item><title>Algorithm_backTracking</title><link>https://qizhengzou.github.io/algorithm_backtracking/</link><pubDate>Thu, 06 Jan 2022 08:22:27 +0800</pubDate><author>作者</author><guid>https://qizhengzou.github.io/algorithm_backtracking/</guid><description>回溯算法 理论基础 也叫回溯搜索算法。 回溯是递归的副产品，只要有递归就会有回溯 回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案，并不算高效</description></item></channel></rss>